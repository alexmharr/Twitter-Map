total <- reactive({
followers <- american_results %>%
sample_n(input$obs)
return(followers)
})
radius <- reactive({
getRadius <- function(df) {
sapply(df$friends, function(friends) {
if(friends <= 100) {
2
} else if(friends > 100 & friends <= 500) {
3
} else if(friends > 500 & friends <= 1000) {
5
} else if(friends > 1000 & friends <= 2000) {
6
} else if(friends > 2000) {
7
} else {
8
} })
}
getRadius(total())
})
friends <- reactive({
total()$friends
})
output$map <- renderLeaflet({
binPal <- colorQuantile("Blues", total()$friends, n = 7)
l <- leaflet() %>%
addTiles() %>%
addProviderTiles(providers$Esri.WorldStreetMap) %>%
setView(lng = -98.35, lat = 39.5, zoom = 3)
if(input$markers == "Markers") {
l <- l %>% addMarkers(data = total(), lng = ~lng, lat = ~lat, label = ~htmlEscape(screenName))
} else {
l <- l %>%  addCircleMarkers(data = total(), radius = radius(), color = binPal(friends()), stroke = FALSE, fillOpacity = 0.5)
}
return(l)
})
# determining options for table
output$table <- renderTable({
if(input$sort=='a'){
result.type <- "recent"
}
if(input$sort=='b'){
result.type <- "popular"
}
if(input$sort=='c'){
result.type <- "mixed"
}
if(input$type=='a'){
search.type <- "from:"
}
if(input$type=='b'){
search.type <- "#"
}
search.string <- paste(search.type, input$search, sep = "")
no.of.tweets <- input$tweets
tweets <- searchTwitter(search.string, n = no.of.tweets, lang = "en", resultType = result.type)
tweetsDF <- twListToDF(tweets)
tweetsDF <- select(tweetsDF, screenName, text, created, retweetCount, favoriteCount)
names(tweetsDF)[1] <- "Twitter Handle"
names(tweetsDF)[2] <- "Text"
names(tweetsDF)[3] <- "Date Created"
names(tweetsDF)[4] <- "Number of Retweets"
names(tweetsDF)[5] <- "Number of Favorites"
# displaying table results
tweetsDF
})
output$message <- renderText({
table.message <- "Results displayed from the last week"
# returning message for tables
return(table.message)
})
#storing reactive Values  here
data <- reactiveValues()
data$interest <- ""
output$interest.table <- renderTable({
#this csv is from 'fanpagelist.com/category/top_users/view/list/sort/followers/', not an api.
top100.user <- read.csv("top100 twitter user.csv")
if (input$tweet_interest == "Entertainer"){
data$interest <- input$Entertainer_interest
}
#filtering the table with the reactive values
top100.category <- top100.user[grep(data$interest, top100.user$Categories),]
})
observeEvent(input$tweet_interest, {data$interest <- input$tweet_interest})
}
runApp('ui.R')
runApp('ui.R')
runApp('ui.R')
runApp('ui.R')
source('my_ui.R')
source('my_server.R')
shinyApp(ui = my.ui, server = my.server)
setup_twitter_oauth("APMnFSmvPJ56HLqRlO957IpNa", "6Ra0pjhVcqQl64ArBrQtY6jUCraqJYrLA9bTs9MmFv7no3V8Zp",
"2340813607-fJqGczp5N7NhyrcGfoMR8Hx0yEc3UhOO5x4eJOh", "x7Ty5DTPxnBnMcXcwy3KP2vX4inB3UnNqsk0h6bjtzJoO")
runApp('ui.R')
runApp('ui.R')
my.server <- function(input, output) {
#Map portion
#Calculates the total amount of followers should be displayed for the map
#american_results is sourced from the Twitter Follower Conversion.R script
#Which contains the API and conversion process
total <- reactive({
followers <- american_results %>%
sample_n(input$obs)
return(followers)
})
#Calculates the radius based off of the amount of user friends
radius <- reactive({
getRadius <- function(df) {
sapply(df$friends, function(friends) {
if(friends <= 100) {
2
} else if(friends > 100 & friends <= 500) {
3
} else if(friends > 500 & friends <= 1000) {
5
} else if(friends > 1000 & friends <= 2000) {
6
} else if(friends > 2000) {
7
} else {
8
} })
}
getRadius(total())
})
friends <- reactive({
total()$friends
})
#Renders a leaflet map
output$map <- renderLeaflet({
binPal <- colorQuantile("Blues", total()$friends, n = 7)
l <- leaflet() %>%
addTiles() %>%
addProviderTiles(providers$Esri.WorldStreetMap) %>%
setView(lng = -98.35, lat = 39.5, zoom = 3)
if(input$markers == "Markers") {
l <- l %>% addMarkers(data = total(), lng = ~lng, lat = ~lat, label = ~htmlEscape(screenName))
} else {
l <- l %>%  addCircleMarkers(data = total(), radius = radius(), color = binPal(friends()), stroke = FALSE, fillOpacity = 0.5)
}
return(l)
})
# determining options for table
output$table <- renderTable({
if(input$sort=='a'){
result.type <- "recent"
}
if(input$sort=='b'){
result.type <- "popular"
}
if(input$sort=='c'){
result.type <- "mixed"
}
if(input$type=='a'){
search.type <- "from:"
}
if(input$type=='b'){
search.type <- "#"
}
search.string <- paste(search.type, input$search, sep = "")
no.of.tweets <- input$tweets
tweets <- searchTwitter(search.string, n = no.of.tweets, lang = "en", resultType = result.type)
tweetsDF <- twListToDF(tweets)
tweetsDF <- select(tweetsDF, screenName, text, created, retweetCount, favoriteCount)
names(tweetsDF)[1] <- "Twitter Handle"
names(tweetsDF)[2] <- "Text"
names(tweetsDF)[3] <- "Date Created"
names(tweetsDF)[4] <- "Number of Retweets"
names(tweetsDF)[5] <- "Number of Favorites"
# displaying table results
tweetsDF
})
output$message <- renderText({
table.message <- "Results displayed from the last week"
# returning message for tables
return(table.message)
})
#storing reactive Values  here
data <- reactiveValues()
data$interest <- ""
output$interest.table <- renderTable({
#this csv is from 'fanpagelist.com/category/top_users/view/list/sort/followers/', not an api.
top100.user <- read.csv("top100 twitter user.csv")
if (input$tweet_interest == "Entertainer"){
data$interest <- input$Entertainer_interest
}
#filtering the table with the reactive values
top100.category <- top100.user[grep(data$interest, top100.user$Categories),]
})
observeEvent(input$tweet_interest, {data$interest <- input$tweet_interest})
}
shinyApp(my.ui, my.server)
shinyApp(my.ui, my.server)
runApp('ui.R')
ui <- navbarPage(
title = "Twitter Analysis",
tabPanel("Welcome",
sidebarLayout(
sidebarPanel(
h2("About"),
p("For this application, we used the ", code("twitteR"), " package, ", br(),
"which accesses the Twitter API.", br(), " Also used was the Google Maps API"),
h3("Authors"),
p("Alexander Harr", br(),
"Julian Perkowski",br(), "Kelvin Kaholi")
),
mainPanel(
h1("Introducing Twitter Analysis"),
p("Twitter Analysis is an application that allows you to",strong("search, view, and see popular"),
"tweets and accounts"),
br(),
br(),
img(src = "TwitterLogo.png", height = 500, width = 500)
)
)
),
tabPanel(
title ="Map",
sidebarLayout(
sidebarPanel(
sliderInput("obs", label = "Number of Followers", min = 25, max = nrow(american_results), value = nrow(american_results)/2),
selectInput("markers", label = "Choose a marker display", choices = c("Markers" ,"Circles"))
),
mainPanel(
leafletOutput("map")
)
)
),
tabPanel(
title = "Search",
sidebarLayout(
sidebarPanel(
em(p("Search Options")),
selectInput('type', "Search Type:",
c("Twitter Handle" = 'a', "Trend" = 'b')),
selectInput('sort', "Sort Results By:",
c("Most Recent" = 'a', "Most Popular" = 'b', "Mixed" = 'c')),
textInput('search', label = "Search Box:"),
sliderInput('tweets',
"Number of Tweets Displayed:",
value = 10,
min = 1,
max = 20)
),
mainPanel(
strong(p(textOutput('message'))),
tableOutput("table")
)
)
),
tabPanel(
title = "Interest",
sidebarLayout(
sidebarPanel(
em(p("Twitter's Interest")),
#Categories that can describe different types of Twitter users
selectInput("tweet_interest", "Your Interest?",
c("Athlete" = "Athlete", "Brand" = "Brand", "Entertainer",
"Executive" = "Executive", "Media" = "Media", "Organization" = "Organization",
"Politician" = "Politician", "Sports Team"= "Sports Team", "Technology" = "Technology")
),
#if it is Entertainer, this will pop up.
conditionalPanel(
condition = "input.tweet_interest == 'Entertainer'",
selectInput("Entertainer_interest", "What type?",
c("Comedian" = "Comedian",
"Musician" = "Musician", "Reality Star" = "Reality Star", "TV Host" = "TV Host")
)
)
),
mainPanel(
tableOutput("interest.table")
)
)
)
)
server <- function(input, output) {
#Map portion
#Calculates the total amount of followers should be displayed for the map
#american_results is sourced from the Twitter Follower Conversion.R script
#Which contains the API and conversion process
total <- reactive({
followers <- american_results %>%
sample_n(input$obs)
return(followers)
})
#Calculates the radius based off of the amount of user friends
radius <- reactive({
getRadius <- function(df) {
sapply(df$friends, function(friends) {
if(friends <= 100) {
2
} else if(friends > 100 & friends <= 500) {
3
} else if(friends > 500 & friends <= 1000) {
5
} else if(friends > 1000 & friends <= 2000) {
6
} else if(friends > 2000) {
7
} else {
8
} })
}
getRadius(total())
})
friends <- reactive({
total()$friends
})
#Renders a leaflet map
output$map <- renderLeaflet({
binPal <- colorQuantile("Blues", total()$friends, n = 7)
l <- leaflet() %>%
addTiles() %>%
addProviderTiles(providers$Esri.WorldStreetMap) %>%
setView(lng = -98.35, lat = 39.5, zoom = 3)
if(input$markers == "Markers") {
l <- l %>% addMarkers(data = total(), lng = ~lng, lat = ~lat, label = ~htmlEscape(screenName))
} else {
l <- l %>%  addCircleMarkers(data = total(), radius = radius(), color = binPal(friends()), stroke = FALSE, fillOpacity = 0.5)
}
return(l)
})
# determining options for table
output$table <- renderTable({
if(input$sort=='a'){
result.type <- "recent"
}
if(input$sort=='b'){
result.type <- "popular"
}
if(input$sort=='c'){
result.type <- "mixed"
}
if(input$type=='a'){
search.type <- "from:"
}
if(input$type=='b'){
search.type <- "#"
}
search.string <- paste(search.type, input$search, sep = "")
no.of.tweets <- input$tweets
tweets <- searchTwitter(search.string, n = no.of.tweets, lang = "en", resultType = result.type)
tweetsDF <- twListToDF(tweets)
tweetsDF <- select(tweetsDF, screenName, text, created, retweetCount, favoriteCount)
names(tweetsDF)[1] <- "Twitter Handle"
names(tweetsDF)[2] <- "Text"
names(tweetsDF)[3] <- "Date Created"
names(tweetsDF)[4] <- "Number of Retweets"
names(tweetsDF)[5] <- "Number of Favorites"
# displaying table results
tweetsDF
})
output$message <- renderText({
table.message <- "Results displayed from the last week"
# returning message for tables
return(table.message)
})
#storing reactive Values  here
data <- reactiveValues()
data$interest <- ""
output$interest.table <- renderTable({
#this csv is from 'fanpagelist.com/category/top_users/view/list/sort/followers/', not an api.
top100.user <- read.csv("top100 twitter user.csv")
if (input$tweet_interest == "Entertainer"){
data$interest <- input$Entertainer_interest
}
#filtering the table with the reactive values
top100.category <- top100.user[grep(data$interest, top100.user$Categories),]
})
observeEvent(input$tweet_interest, {data$interest <- input$tweet_interest})
}
shinyApp(ui, server)
runApp('ui.R')
source("interactive_map.R")
shinyServer(ui)
shinyServer(server)
runApp()
runApp()
runApp()
runApp()
runApp()
library(dplyr)
library(data.table)
library(ggplot2)
library(ggvis)
library(rgdal)
library(mapproj)
library(leaflet)
library(twitteR)
library(ggmap)
library(shiny)
library(htmltools)
server <- function(input, output) {
#Map portion
#Calculates the total amount of followers should be displayed for the map
#american_results is sourced from the Twitter Follower Conversion.R script
#Which contains the API and conversion process
total <- reactive({
followers <- american_results %>%
sample_n(input$obs)
return(followers)
})
#Calculates the radius based off of the amount of user friends
radius <- reactive({
getRadius <- function(df) {
sapply(df$friends, function(friends) {
if(friends <= 100) {
2
} else if(friends > 100 & friends <= 500) {
3
} else if(friends > 500 & friends <= 1000) {
5
} else if(friends > 1000 & friends <= 2000) {
6
} else if(friends > 2000) {
7
} else {
8
} })
}
getRadius(total())
})
friends <- reactive({
total()$friends
})
#Renders a leaflet map
output$map <- renderLeaflet({
binPal <- colorQuantile("Blues", total()$friends, n = 7)
l <- leaflet() %>%
addTiles() %>%
addProviderTiles(providers$Esri.WorldStreetMap) %>%
setView(lng = -98.35, lat = 39.5, zoom = 3)
if(input$markers == "Markers") {
l <- l %>% addMarkers(data = total(), lng = ~lng, lat = ~lat, label = ~htmlEscape(screenName))
} else {
l <- l %>%  addCircleMarkers(data = total(), radius = radius(), color = binPal(friends()), stroke = FALSE, fillOpacity = 0.5)
}
return(l)
})
# determining options for table
output$table <- renderTable({
if(input$sort=='a'){
result.type <- "recent"
}
if(input$sort=='b'){
result.type <- "popular"
}
if(input$sort=='c'){
result.type <- "mixed"
}
if(input$type=='a'){
search.type <- "from:"
}
if(input$type=='b'){
search.type <- "#"
}
search.string <- paste(search.type, input$search, sep = "")
no.of.tweets <- input$tweets
tweets <- searchTwitter(search.string, n = no.of.tweets, lang = "en", resultType = result.type)
tweetsDF <- twListToDF(tweets)
#tweetsDF <- select(tweetsDF, screenName, text, created, retweetCount, favoriteCount)
#names(tweetsDF)[1] <- "Twitter Handle"
#names(tweetsDF)[2] <- "Text"
#names(tweetsDF)[3] <- "Date Created"
#names(tweetsDF)[4] <- "Number of Retweets"
#names(tweetsDF)[5] <- "Number of Favorites"
# displaying table results
return(tweetsDF)
})
output$message <- renderText({
table.message <- "Results displayed from the last week"
# returning message for tables
return(table.message)
})
#storing reactive Values  here
data <- reactiveValues()
data$interest <- ""
output$interest.table <- renderTable({
#this csv is from 'fanpagelist.com/category/top_users/view/list/sort/followers/', not an api.
top100.user <- read.csv("top100 twitter user.csv")
if (input$tweet_interest == "Entertainer"){
data$interest <- input$Entertainer_interest
}
#filtering the table with the reactive values
top100.category <- top100.user[grep(data$interest, top100.user$Categories),]
})
observeEvent(input$tweet_interest, {data$interest <- input$tweet_interest})
}
runApp()
runApp()
warnings()
runApp()
runApp()
setup_twitter_oauth("APMnFSmvPJ56HLqRlO957IpNa", "6Ra0pjhVcqQl64ArBrQtY6jUCraqJYrLA9bTs9MmFv7no3V8Zp",
"2340813607-fJqGczp5N7NhyrcGfoMR8Hx0yEc3UhOO5x4eJOh", "x7Ty5DTPxnBnMcXcwy3KP2vX4inB3UnNqsk0h6bjtzJoO")
setup_twitter_oauth("APMnFSmvPJ56HLqRlO957IpNa", "6Ra0pjhVcqQl64ArBrQtY6jUCraqJYrLA9bTs9MmFv7no3V8Zp",
"2340813607-fJqGczp5N7NhyrcGfoMR8Hx0yEc3UhOO5x4eJOh", "x7Ty5DTPxnBnMcXcwy3KP2vX4inB3UnNqsk0h6bjtzJoO")
setup_twitter_oauth("APMnFSmvPJ56HLqRlO957IpNa", "6Ra0pjhVcqQl64ArBrQtY6jUCraqJYrLA9bTs9MmFv7no3V8Zp",
"2340813607-fJqGczp5N7NhyrcGfoMR8Hx0yEc3UhOO5x4eJOh", "x7Ty5DTPxnBnMcXcwy3KP2vX4inB3UnNqsk0h6bjtzJoO")
setwd("~/Documents/Winter_Quarter/INFO-201/Assignments/Twitter/Twitter-Map")
setup_twitter_oauth("APMnFSmvPJ56HLqRlO957IpNa", "6Ra0pjhVcqQl64ArBrQtY6jUCraqJYrLA9bTs9MmFv7no3V8Zp",
"2340813607-fJqGczp5N7NhyrcGfoMR8Hx0yEc3UhOO5x4eJOh", "x7Ty5DTPxnBnMcXcwy3KP2vX4inB3UnNqsk0h6bjtzJoO")
runApp()
runApp()
setup_twitter_oauth("APMnFSmvPJ56HLqRlO957IpNa", "6Ra0pjhVcqQl64ArBrQtY6jUCraqJYrLA9bTs9MmFv7no3V8Zp",
"2340813607-fJqGczp5N7NhyrcGfoMR8Hx0yEc3UhOO5x4eJOh", "x7Ty5DTPxnBnMcXcwy3KP2vX4inB3UnNqsk0h6bjtzJoO")
